// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: leagueservice/league.proto

package leagueservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SummonerProfile struct {
	ProfileIconId        int32    `protobuf:"varint,1,opt,name=profileIconId,proto3" json:"profileIconId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Puuid                string   `protobuf:"bytes,4,opt,name=puuid,proto3" json:"puuid,omitempty"`
	SummonerLevel        int64    `protobuf:"varint,5,opt,name=summonerLevel,proto3" json:"summonerLevel,omitempty"`
	RevisionDate         int64    `protobuf:"varint,6,opt,name=revisionDate,proto3" json:"revisionDate,omitempty"`
	Id                   string   `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	AccountId            string   `protobuf:"bytes,8,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SummonerProfile) Reset()         { *m = SummonerProfile{} }
func (m *SummonerProfile) String() string { return proto.CompactTextString(m) }
func (*SummonerProfile) ProtoMessage()    {}
func (*SummonerProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7af40a0700cd5cf, []int{0}
}
func (m *SummonerProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SummonerProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SummonerProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SummonerProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SummonerProfile.Merge(m, src)
}
func (m *SummonerProfile) XXX_Size() int {
	return m.Size()
}
func (m *SummonerProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SummonerProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SummonerProfile proto.InternalMessageInfo

func (m *SummonerProfile) GetProfileIconId() int32 {
	if m != nil {
		return m.ProfileIconId
	}
	return 0
}

func (m *SummonerProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SummonerProfile) GetPuuid() string {
	if m != nil {
		return m.Puuid
	}
	return ""
}

func (m *SummonerProfile) GetSummonerLevel() int64 {
	if m != nil {
		return m.SummonerLevel
	}
	return 0
}

func (m *SummonerProfile) GetRevisionDate() int64 {
	if m != nil {
		return m.RevisionDate
	}
	return 0
}

func (m *SummonerProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SummonerProfile) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

type MatchHistory struct {
	Matches              []*MatchHistory_Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	EndIndex             int32                 `protobuf:"varint,2,opt,name=endIndex,proto3" json:"endIndex,omitempty"`
	StartIndex           int32                 `protobuf:"varint,3,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
	TotalGames           int32                 `protobuf:"varint,4,opt,name=totalGames,proto3" json:"totalGames,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MatchHistory) Reset()         { *m = MatchHistory{} }
func (m *MatchHistory) String() string { return proto.CompactTextString(m) }
func (*MatchHistory) ProtoMessage()    {}
func (*MatchHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7af40a0700cd5cf, []int{1}
}
func (m *MatchHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchHistory.Merge(m, src)
}
func (m *MatchHistory) XXX_Size() int {
	return m.Size()
}
func (m *MatchHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchHistory.DiscardUnknown(m)
}

var xxx_messageInfo_MatchHistory proto.InternalMessageInfo

func (m *MatchHistory) GetMatches() []*MatchHistory_Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *MatchHistory) GetEndIndex() int32 {
	if m != nil {
		return m.EndIndex
	}
	return 0
}

func (m *MatchHistory) GetStartIndex() int32 {
	if m != nil {
		return m.StartIndex
	}
	return 0
}

func (m *MatchHistory) GetTotalGames() int32 {
	if m != nil {
		return m.TotalGames
	}
	return 0
}

type MatchHistory_Match struct {
	Lane                 string   `protobuf:"bytes,1,opt,name=lane,proto3" json:"lane,omitempty"`
	GameId               int64    `protobuf:"varint,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
	Champion             int32    `protobuf:"varint,3,opt,name=champion,proto3" json:"champion,omitempty"`
	PlatformId           string   `protobuf:"bytes,4,opt,name=platformId,proto3" json:"platformId,omitempty"`
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Queue                int32    `protobuf:"varint,6,opt,name=queue,proto3" json:"queue,omitempty"`
	Role                 string   `protobuf:"bytes,7,opt,name=role,proto3" json:"role,omitempty"`
	Season               int32    `protobuf:"varint,8,opt,name=season,proto3" json:"season,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchHistory_Match) Reset()         { *m = MatchHistory_Match{} }
func (m *MatchHistory_Match) String() string { return proto.CompactTextString(m) }
func (*MatchHistory_Match) ProtoMessage()    {}
func (*MatchHistory_Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7af40a0700cd5cf, []int{1, 0}
}
func (m *MatchHistory_Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchHistory_Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchHistory_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MatchHistory_Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchHistory_Match.Merge(m, src)
}
func (m *MatchHistory_Match) XXX_Size() int {
	return m.Size()
}
func (m *MatchHistory_Match) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchHistory_Match.DiscardUnknown(m)
}

var xxx_messageInfo_MatchHistory_Match proto.InternalMessageInfo

func (m *MatchHistory_Match) GetLane() string {
	if m != nil {
		return m.Lane
	}
	return ""
}

func (m *MatchHistory_Match) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *MatchHistory_Match) GetChampion() int32 {
	if m != nil {
		return m.Champion
	}
	return 0
}

func (m *MatchHistory_Match) GetPlatformId() string {
	if m != nil {
		return m.PlatformId
	}
	return ""
}

func (m *MatchHistory_Match) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MatchHistory_Match) GetQueue() int32 {
	if m != nil {
		return m.Queue
	}
	return 0
}

func (m *MatchHistory_Match) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *MatchHistory_Match) GetSeason() int32 {
	if m != nil {
		return m.Season
	}
	return 0
}

type GetSummonerStatsRequest struct {
	SummonerName         string   `protobuf:"bytes,1,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSummonerStatsRequest) Reset()         { *m = GetSummonerStatsRequest{} }
func (m *GetSummonerStatsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSummonerStatsRequest) ProtoMessage()    {}
func (*GetSummonerStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7af40a0700cd5cf, []int{2}
}
func (m *GetSummonerStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSummonerStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSummonerStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSummonerStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSummonerStatsRequest.Merge(m, src)
}
func (m *GetSummonerStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSummonerStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSummonerStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSummonerStatsRequest proto.InternalMessageInfo

func (m *GetSummonerStatsRequest) GetSummonerName() string {
	if m != nil {
		return m.SummonerName
	}
	return ""
}

func (m *GetSummonerStatsRequest) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type GetSummonerStatsResponse struct {
	SummonerProfile      *SummonerProfile `protobuf:"bytes,1,opt,name=summonerProfile,proto3" json:"summonerProfile,omitempty"`
	MatchHistory         *MatchHistory    `protobuf:"bytes,2,opt,name=matchHistory,proto3" json:"matchHistory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetSummonerStatsResponse) Reset()         { *m = GetSummonerStatsResponse{} }
func (m *GetSummonerStatsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSummonerStatsResponse) ProtoMessage()    {}
func (*GetSummonerStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c7af40a0700cd5cf, []int{3}
}
func (m *GetSummonerStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSummonerStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSummonerStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSummonerStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSummonerStatsResponse.Merge(m, src)
}
func (m *GetSummonerStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSummonerStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSummonerStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSummonerStatsResponse proto.InternalMessageInfo

func (m *GetSummonerStatsResponse) GetSummonerProfile() *SummonerProfile {
	if m != nil {
		return m.SummonerProfile
	}
	return nil
}

func (m *GetSummonerStatsResponse) GetMatchHistory() *MatchHistory {
	if m != nil {
		return m.MatchHistory
	}
	return nil
}

func init() {
	proto.RegisterType((*SummonerProfile)(nil), "leagueservice.SummonerProfile")
	proto.RegisterType((*MatchHistory)(nil), "leagueservice.MatchHistory")
	proto.RegisterType((*MatchHistory_Match)(nil), "leagueservice.MatchHistory.Match")
	proto.RegisterType((*GetSummonerStatsRequest)(nil), "leagueservice.GetSummonerStatsRequest")
	proto.RegisterType((*GetSummonerStatsResponse)(nil), "leagueservice.GetSummonerStatsResponse")
}

func init() { proto.RegisterFile("leagueservice/league.proto", fileDescriptor_c7af40a0700cd5cf) }

var fileDescriptor_c7af40a0700cd5cf = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd4, 0x3c,
	0x10, 0xfe, 0x9d, 0x6d, 0xb6, 0x5d, 0x77, 0xfb, 0x57, 0xb2, 0xa0, 0x44, 0x4b, 0x59, 0x96, 0x50,
	0xc1, 0x8a, 0x43, 0x03, 0xcb, 0x91, 0x03, 0xa2, 0xaa, 0xd4, 0xae, 0x54, 0x10, 0x72, 0x05, 0x07,
	0x2e, 0xc8, 0x24, 0xd3, 0xad, 0xa5, 0xc4, 0x4e, 0x6d, 0x67, 0x45, 0x85, 0xb8, 0xf0, 0x0a, 0x70,
	0xe8, 0x0b, 0xf0, 0x2e, 0xdc, 0x40, 0xe2, 0xc4, 0x0d, 0x15, 0x5e, 0x82, 0x1b, 0xb2, 0x93, 0x6d,
	0x37, 0x41, 0xc0, 0x85, 0x9b, 0xbf, 0x6f, 0xc6, 0x33, 0xe3, 0x6f, 0x3e, 0x19, 0xf7, 0x52, 0x60,
	0x93, 0x02, 0x34, 0xa8, 0x29, 0x8f, 0x21, 0x2a, 0xd1, 0x66, 0xae, 0xa4, 0x91, 0x64, 0xa5, 0x16,
	0xeb, 0xad, 0x4f, 0xa4, 0x9c, 0xa4, 0x10, 0xb1, 0x9c, 0x47, 0x4c, 0x08, 0x69, 0x98, 0xe1, 0x52,
	0xe8, 0x32, 0x39, 0xfc, 0x82, 0xf0, 0xea, 0x7e, 0x91, 0x65, 0x52, 0x80, 0x7a, 0xac, 0xe4, 0x01,
	0x4f, 0x81, 0x6c, 0xe0, 0x95, 0xbc, 0x3c, 0x8e, 0x63, 0x29, 0xc6, 0x49, 0x80, 0x06, 0x68, 0xe8,
	0xd3, 0x3a, 0x49, 0x08, 0x5e, 0x10, 0x2c, 0x83, 0xa0, 0x35, 0x40, 0xc3, 0x0e, 0x75, 0x67, 0x72,
	0x01, 0xfb, 0x79, 0x51, 0xf0, 0x24, 0x58, 0x70, 0x64, 0x09, 0x6c, 0x3d, 0x5d, 0xb5, 0xd8, 0x83,
	0x29, 0xa4, 0x81, 0x3f, 0x40, 0xc3, 0x16, 0xad, 0x93, 0x24, 0xc4, 0x5d, 0x05, 0x53, 0xae, 0xb9,
	0x14, 0xdb, 0xcc, 0x40, 0xd0, 0x76, 0x49, 0x35, 0x8e, 0xfc, 0x8f, 0x3d, 0x9e, 0x04, 0x8b, 0xae,
	0xb8, 0xc7, 0x13, 0xb2, 0x8e, 0x3b, 0x2c, 0x8e, 0x65, 0x21, 0xcc, 0x38, 0x09, 0x96, 0x1c, 0x7d,
	0x4e, 0x84, 0x3f, 0x3c, 0xdc, 0x7d, 0xc8, 0x4c, 0x7c, 0xb8, 0xcb, 0xb5, 0x91, 0xea, 0x98, 0xdc,
	0xc3, 0x8b, 0x99, 0xc5, 0xa0, 0x03, 0x34, 0x68, 0x0d, 0x97, 0x47, 0xd7, 0x36, 0x6b, 0x5a, 0x6d,
	0xce, 0x67, 0x97, 0x80, 0xce, 0x6e, 0x90, 0x1e, 0x5e, 0x02, 0x91, 0x8c, 0x45, 0x02, 0x2f, 0x03,
	0xcf, 0x09, 0x72, 0x86, 0x49, 0x1f, 0x63, 0x6d, 0x98, 0x32, 0x65, 0xb4, 0xe5, 0xa2, 0x73, 0x8c,
	0x8d, 0x1b, 0x69, 0x58, 0xba, 0xc3, 0x32, 0xd0, 0x4e, 0x1c, 0x9f, 0xce, 0x31, 0xbd, 0x8f, 0x08,
	0xfb, 0xae, 0x9d, 0x55, 0x35, 0x65, 0x02, 0x9c, 0xe4, 0x1d, 0xea, 0xce, 0x64, 0x0d, 0xb7, 0x27,
	0x2c, 0x83, 0x71, 0xe2, 0xfa, 0xb6, 0x68, 0x85, 0xec, 0x44, 0xf1, 0x21, 0xcb, 0x72, 0x2e, 0x45,
	0xd5, 0xf3, 0x0c, 0xdb, 0x8e, 0x79, 0xca, 0xcc, 0x81, 0x54, 0xd9, 0x78, 0xb6, 0x8e, 0x39, 0xc6,
	0x2a, 0x67, 0x78, 0x06, 0xda, 0xb0, 0x2c, 0xaf, 0xf6, 0x71, 0x4e, 0xd8, 0x3d, 0x1e, 0x15, 0x50,
	0x94, 0x4b, 0xf0, 0x69, 0x09, 0xec, 0x6c, 0x4a, 0xa6, 0x50, 0xe9, 0xef, 0xce, 0x76, 0x36, 0x0d,
	0x4c, 0x4b, 0xe1, 0xe4, 0xf7, 0x69, 0x85, 0xc2, 0xa7, 0xf8, 0xd2, 0x0e, 0x98, 0x99, 0xb3, 0xf6,
	0x0d, 0x33, 0x9a, 0xc2, 0x51, 0x01, 0xda, 0x90, 0xeb, 0xe7, 0x76, 0x78, 0xee, 0x1c, 0x54, 0xbe,
	0xb5, 0x3b, 0x23, 0x1f, 0x59, 0x27, 0xad, 0xe1, 0xb6, 0x82, 0x89, 0x7d, 0x99, 0xe7, 0xa2, 0x15,
	0x0a, 0xdf, 0x23, 0x1c, 0xfc, 0x5a, 0x58, 0xe7, 0x52, 0x68, 0x20, 0xbb, 0x78, 0x55, 0xd7, 0xbd,
	0xec, 0x6a, 0x2f, 0x8f, 0xfa, 0x8d, 0x3d, 0x37, 0x1c, 0x4f, 0x9b, 0xd7, 0xc8, 0x7d, 0xdc, 0xcd,
	0xe6, 0xbc, 0xe0, 0x86, 0x58, 0x1e, 0x5d, 0xfe, 0x83, 0x5d, 0x68, 0xed, 0xc2, 0xe8, 0xc4, 0xc3,
	0x9d, 0x3d, 0x97, 0xfc, 0x20, 0xe7, 0xe4, 0x1d, 0xc2, 0x17, 0x9b, 0x53, 0x3f, 0x11, 0x4c, 0x1d,
	0x93, 0x1b, 0x8d, 0x92, 0xbf, 0x11, 0xad, 0x77, 0xf3, 0xaf, 0x79, 0xa5, 0x06, 0xe1, 0xad, 0x37,
	0x9f, 0xbf, 0xbf, 0xf5, 0x36, 0x48, 0x18, 0x4d, 0xef, 0x44, 0xb3, 0x67, 0x45, 0xaf, 0x6a, 0x8a,
	0xbf, 0x8e, 0xb4, 0xbd, 0x43, 0x0c, 0xbe, 0xd2, 0xac, 0xb3, 0xc5, 0xb7, 0xb9, 0x82, 0xd8, 0x7e,
	0x11, 0x2c, 0xfd, 0xe7, 0xd3, 0x0d, 0xd1, 0x6d, 0xb4, 0x75, 0xf5, 0xc3, 0x69, 0x1f, 0x7d, 0x3a,
	0xed, 0xa3, 0xaf, 0xa7, 0x7d, 0x74, 0xf2, 0xad, 0xff, 0xdf, 0xb3, 0xfa, 0x8f, 0xf5, 0xa2, 0xed,
	0xbe, 0xa6, 0xbb, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xed, 0xc9, 0xd4, 0xe5, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeagueApiClient is the client API for LeagueApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeagueApiClient interface {
	GetSummonerStatsUnary(ctx context.Context, in *GetSummonerStatsRequest, opts ...grpc.CallOption) (*GetSummonerStatsResponse, error)
	GetSummonerStatsBiDirectional(ctx context.Context, opts ...grpc.CallOption) (LeagueApi_GetSummonerStatsBiDirectionalClient, error)
}

type leagueApiClient struct {
	cc *grpc.ClientConn
}

func NewLeagueApiClient(cc *grpc.ClientConn) LeagueApiClient {
	return &leagueApiClient{cc}
}

func (c *leagueApiClient) GetSummonerStatsUnary(ctx context.Context, in *GetSummonerStatsRequest, opts ...grpc.CallOption) (*GetSummonerStatsResponse, error) {
	out := new(GetSummonerStatsResponse)
	err := c.cc.Invoke(ctx, "/leagueservice.LeagueApi/GetSummonerStatsUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leagueApiClient) GetSummonerStatsBiDirectional(ctx context.Context, opts ...grpc.CallOption) (LeagueApi_GetSummonerStatsBiDirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LeagueApi_serviceDesc.Streams[0], "/leagueservice.LeagueApi/GetSummonerStatsBiDirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &leagueApiGetSummonerStatsBiDirectionalClient{stream}
	return x, nil
}

type LeagueApi_GetSummonerStatsBiDirectionalClient interface {
	Send(*GetSummonerStatsRequest) error
	Recv() (*GetSummonerStatsResponse, error)
	grpc.ClientStream
}

type leagueApiGetSummonerStatsBiDirectionalClient struct {
	grpc.ClientStream
}

func (x *leagueApiGetSummonerStatsBiDirectionalClient) Send(m *GetSummonerStatsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leagueApiGetSummonerStatsBiDirectionalClient) Recv() (*GetSummonerStatsResponse, error) {
	m := new(GetSummonerStatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeagueApiServer is the server API for LeagueApi service.
type LeagueApiServer interface {
	GetSummonerStatsUnary(context.Context, *GetSummonerStatsRequest) (*GetSummonerStatsResponse, error)
	GetSummonerStatsBiDirectional(LeagueApi_GetSummonerStatsBiDirectionalServer) error
}

func RegisterLeagueApiServer(s *grpc.Server, srv LeagueApiServer) {
	s.RegisterService(&_LeagueApi_serviceDesc, srv)
}

func _LeagueApi_GetSummonerStatsUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummonerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeagueApiServer).GetSummonerStatsUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leagueservice.LeagueApi/GetSummonerStatsUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeagueApiServer).GetSummonerStatsUnary(ctx, req.(*GetSummonerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeagueApi_GetSummonerStatsBiDirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeagueApiServer).GetSummonerStatsBiDirectional(&leagueApiGetSummonerStatsBiDirectionalServer{stream})
}

type LeagueApi_GetSummonerStatsBiDirectionalServer interface {
	Send(*GetSummonerStatsResponse) error
	Recv() (*GetSummonerStatsRequest, error)
	grpc.ServerStream
}

type leagueApiGetSummonerStatsBiDirectionalServer struct {
	grpc.ServerStream
}

func (x *leagueApiGetSummonerStatsBiDirectionalServer) Send(m *GetSummonerStatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leagueApiGetSummonerStatsBiDirectionalServer) Recv() (*GetSummonerStatsRequest, error) {
	m := new(GetSummonerStatsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LeagueApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "leagueservice.LeagueApi",
	HandlerType: (*LeagueApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummonerStatsUnary",
			Handler:    _LeagueApi_GetSummonerStatsUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSummonerStatsBiDirectional",
			Handler:       _LeagueApi_GetSummonerStatsBiDirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "leagueservice/league.proto",
}

func (m *SummonerProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SummonerProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProfileIconId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.ProfileIconId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Puuid) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Puuid)))
		i += copy(dAtA[i:], m.Puuid)
	}
	if m.SummonerLevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.SummonerLevel))
	}
	if m.RevisionDate != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.RevisionDate))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.AccountId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.AccountId)))
		i += copy(dAtA[i:], m.AccountId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchHistory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLeague(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.EndIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.EndIndex))
	}
	if m.StartIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.StartIndex))
	}
	if m.TotalGames != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.TotalGames))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchHistory_Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchHistory_Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Lane) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Lane)))
		i += copy(dAtA[i:], m.Lane)
	}
	if m.GameId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.GameId))
	}
	if m.Champion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.Champion))
	}
	if len(m.PlatformId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.PlatformId)))
		i += copy(dAtA[i:], m.PlatformId)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.Timestamp))
	}
	if m.Queue != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.Queue))
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if m.Season != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.Season))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSummonerStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSummonerStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SummonerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.SummonerName)))
		i += copy(dAtA[i:], m.SummonerName)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLeague(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSummonerStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSummonerStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SummonerProfile != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.SummonerProfile.Size()))
		n1, err1 := m.SummonerProfile.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.MatchHistory != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLeague(dAtA, i, uint64(m.MatchHistory.Size()))
		n2, err2 := m.MatchHistory.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintLeague(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SummonerProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProfileIconId != 0 {
		n += 1 + sovLeague(uint64(m.ProfileIconId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	l = len(m.Puuid)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.SummonerLevel != 0 {
		n += 1 + sovLeague(uint64(m.SummonerLevel))
	}
	if m.RevisionDate != 0 {
		n += 1 + sovLeague(uint64(m.RevisionDate))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovLeague(uint64(l))
		}
	}
	if m.EndIndex != 0 {
		n += 1 + sovLeague(uint64(m.EndIndex))
	}
	if m.StartIndex != 0 {
		n += 1 + sovLeague(uint64(m.StartIndex))
	}
	if m.TotalGames != 0 {
		n += 1 + sovLeague(uint64(m.TotalGames))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchHistory_Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Lane)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.GameId != 0 {
		n += 1 + sovLeague(uint64(m.GameId))
	}
	if m.Champion != 0 {
		n += 1 + sovLeague(uint64(m.Champion))
	}
	l = len(m.PlatformId)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLeague(uint64(m.Timestamp))
	}
	if m.Queue != 0 {
		n += 1 + sovLeague(uint64(m.Queue))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.Season != 0 {
		n += 1 + sovLeague(uint64(m.Season))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSummonerStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SummonerName)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSummonerStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SummonerProfile != nil {
		l = m.SummonerProfile.Size()
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.MatchHistory != nil {
		l = m.MatchHistory.Size()
		n += 1 + l + sovLeague(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLeague(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLeague(x uint64) (n int) {
	return sovLeague(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SummonerProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SummonerProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SummonerProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileIconId", wireType)
			}
			m.ProfileIconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProfileIconId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Puuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Puuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonerLevel", wireType)
			}
			m.SummonerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SummonerLevel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevisionDate", wireType)
			}
			m.RevisionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevisionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeague(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &MatchHistory_Match{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndIndex", wireType)
			}
			m.EndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartIndex", wireType)
			}
			m.StartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGames", wireType)
			}
			m.TotalGames = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGames |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeague(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchHistory_Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lane", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lane = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Champion", wireType)
			}
			m.Champion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Champion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatformId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlatformId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			m.Queue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Queue |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLeague(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSummonerStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSummonerStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSummonerStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SummonerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeague(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSummonerStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSummonerStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSummonerStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SummonerProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SummonerProfile == nil {
				m.SummonerProfile = &SummonerProfile{}
			}
			if err := m.SummonerProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLeague
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLeague
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchHistory == nil {
				m.MatchHistory = &MatchHistory{}
			}
			if err := m.MatchHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLeague(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLeague
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLeague(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLeague
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLeague
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLeague
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLeague
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLeague
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLeague(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLeague
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLeague = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLeague   = fmt.Errorf("proto: integer overflow")
)
